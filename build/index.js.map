{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/root.tsx", "../app/routes/weather.recentHistory.$cityName.tsx", "../app/services/tomorrowAPI.tsx", "../app/library/stringManagement.tsx", "../app/routes/weather.forecast.$cityName.tsx", "../app/routes/weather.realTime.$cityName.tsx", "../app/routes/user.tsx", "../dbConnection/models/users.ts", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["import { PassThrough } from \"node:stream\";\n\nimport type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { createReadableStreamFromReadable } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport isbot from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  loadContext: AppLoadContext\n) {\n  return isbot(request.headers.get(\"user-agent\"))\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import { Outlet, LiveReload } from \"@remix-run/react\";\n\nimport {\n  isRouteErrorResponse,\n  useRouteError,\n} from \"@remix-run/react\";\n\nexport function ErrorBoundary() {\n  const error = useRouteError();\n\n  if (isRouteErrorResponse(error)) {\n    return (\n      <div>\n        <h1>\n          {error.status} {error.statusText}\n        </h1>\n        <p>{error.data}</p>\n      </div>\n    );\n  } else if (error instanceof Error) {\n    return (\n      <div>\n        <h1>Error</h1>\n        <p>{error.message}</p>\n        <p>The stack trace is:</p>\n        <pre>{error.stack}</pre>\n      </div>\n    );\n  } else {\n    return <h1>Unknown Error</h1>;\n  }\n}\n\n\nexport default function Root() {\n  return (\n    <>\n      <Outlet></Outlet>\n      <LiveReload />\n    </>\n  );\n}\n", "import { json, useLoaderData, useActionData, useFetcher} from \"@remix-run/react\";\nimport { getUsers, createUser } from \"../../dbConnection/models/users\";\nimport { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport type { ActionFunctionArgs } from \"@remix-run/node\"; // or cloudflare/deno\nimport { getWeatherRecentHistory } from \"~/services/tomorrowAPI\";\n\n\n\nexport let loader: LoaderFunction = async ({ params }) => {\n  const { cityName } = params;\n  if (!cityName) {\n    return json({ error: 'City name is missing' }, { status: 400 });\n  }\n\n  try {\n    const weatherData = await getWeatherRecentHistory(cityName);\n    return weatherData;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    return json({ error: 'Failed to fetch weather data' }, { status: 500 });\n  }\n};\n\nexport default function WeatherRecentHistory({request}:{request:any}) {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <>\n      {data.error ? (\n        <p>Error: {data.error}</p>\n      ) : (\n        <div className=\"whitespace-pre-wrap break-words overflow-x-auto max-w-full\">{JSON.stringify(data)}</div>\n      )}\n    </>\n  );\n}\n", "import { json } from \"@remix-run/node\";\nimport { convertToURLfriendly } from \"~/library/stringManagement\";\n\nconst baseUrl= \"https://api.tomorrow.io/v4/weather/\";\n\nexport const getWeatherForecast = async (location: string) => {\n    location = convertToURLfriendly(location);\n    const tomorrowUrl = `${baseUrl}/forecast?location=${location}`; // TODO SAVE IN CONSTANTS\n\n    const data = await fetch(tomorrowUrl, {\n        method: 'GET', \n        headers:{\n          apikey: \"9pIbRDZ6vY2jEUckr5BZ7tSOcJsJScrw\", // TODO SAVE IN.ENV\n          accept: 'application/json'\n        }\n      })\n    return json(await data.json())\n}\n\n\nexport const getRealTimeWeather = async (location: string) => {\n    location = convertToURLfriendly(location);\n    const tomorrowUrl = `${baseUrl}/realtime?location=${location}`; // TODO SAVE IN CONSTANTS\n\n    const data = await fetch(tomorrowUrl, {\n        method: 'GET', \n        headers:{\n          apikey: \"9pIbRDZ6vY2jEUckr5BZ7tSOcJsJScrw\", // TODO SAVE IN.ENV\n          accept: 'application/json'\n        }\n      })\n    return json(await data.json())\n}\n\nexport const getWeatherRecentHistory = async (location: string) => {\n    location = convertToURLfriendly(location);\n    const tomorrowUrl = `${baseUrl}/history/recent?location=${location}`; // TODO SAVE IN CONSTANTS\n\n    const data = await fetch(tomorrowUrl, {\n        method: 'GET', \n        headers:{\n          apikey: \"9pIbRDZ6vY2jEUckr5BZ7tSOcJsJScrw\", // TODO SAVE IN.ENV\n          accept: 'application/json'\n        }\n      })\n    return json(await data.json())\n}", "export function convertToURLfriendly(string: string) {\n    return string.replace(/ /g, \"-\").toLowerCase();\n}", "import { json, useLoaderData, useActionData, useFetcher} from \"@remix-run/react\";\nimport { getUsers, createUser } from \"../../dbConnection/models/users\";\nimport { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport type { ActionFunctionArgs } from \"@remix-run/node\"; // or cloudflare/deno\nimport { getWeatherForecast } from \"~/services/tomorrowAPI\";\n\n\n\nexport let loader: LoaderFunction = async ({ params }) => {\n  const { cityName } = params;\n  if (!cityName) {\n    return json({ error: 'City name is missing' }, { status: 400 });\n  }\n\n  try {\n    const weatherData = await getWeatherForecast(cityName);\n    return weatherData;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    return json({ error: 'Failed to fetch weather data' }, { status: 500 });\n  }\n};\n\nexport default function WeatherForecast({request}:{request:any}) {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <>\n      {data.error ? (\n        <p>Error: {data.error}</p>\n      ) : (\n        <div className=\"whitespace-pre-wrap break-words overflow-x-auto max-w-full\">{JSON.stringify(data)}</div>\n      )}\n    </>\n  );\n}\n", "import { json, useLoaderData, useActionData, useFetcher} from \"@remix-run/react\";\nimport { getUsers, createUser } from \"../../dbConnection/models/users\";\nimport { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport type { ActionFunctionArgs } from \"@remix-run/node\"; // or cloudflare/deno\nimport { getRealTimeWeather } from \"~/services/tomorrowAPI\";\n\n\n\nexport let loader: LoaderFunction = async ({ params }) => {\n  const { cityName } = params;\n  if (!cityName) {\n    return json({ error: 'City name is missing' }, { status: 400 });\n  }\n\n  try {\n    const weatherData = await getRealTimeWeather(cityName);\n    return weatherData;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    return json({ error: 'Failed to fetch weather data' }, { status: 500 });\n  }\n};\n\nexport default function WeatherRealTime({request}:{request:any}) {\n  const data = useLoaderData<typeof loader>();\n  return (\n    <>\n      {data.error ? (\n        <p>Error: {data.error}</p>\n      ) : (\n        <div className=\"whitespace-pre-wrap break-words overflow-x-auto max-w-full\">{JSON.stringify(data)}</div>\n      )}\n    </>\n  );\n}\n", "import { json, useLoaderData, useActionData, useFetcher} from \"@remix-run/react\";\nimport { getUsers, createUser } from \"../../dbConnection/models/users\";\nimport { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport type { ActionFunctionArgs } from \"@remix-run/node\"; // or cloudflare/deno\n\n\n//POST MANAGEMENT EXAMPLE\n// export async function action({\n//   request,\n// }: ActionFunctionArgs) {\n//   if (request.method === 'POST') {\n//     try {\n//       const rawData = await request.text();\n\n//       if (!rawData.trim()) {\n//         throw new Error('Request body is empty');\n//       }\n\n//       const data = JSON.parse(rawData);\n//       console.log(\"data: ->>>\", data)\n//       const newUser = await createUser(data);\n//       return json({ status: 'success', data: newUser });     \n//     } catch (error) {\n//       console.error('Error creating user:', error);\n//       return json({ status: 'error', message: 'Failed to create user' }, { status: 500 });\n//     }\n//   }\n// };\n\nexport let loader: LoaderFunction = async ({ request }: { request: Request }) => {\n    const users = await getUsers();\n    \n    return json(users, { headers: { 'Cache-Control': 'no-store' } });  \n    // const response = await fetch('http://localhost:8080/users');\n    // const data = await response.json();\n\n    // return json(data);\n};\n\nexport default function UserApi() {\n  //POST MANAGEMENT EXAMPLE\n  //let data = useActionData<typeof action>(); \n  // if(!data){\n  //   data = useLoaderData<typeof loader>();\n  // }\n  return (\n    // JSON.stringify(useLoaderData<typeof loader>())\n    \"hi from user.tsx\"\n  );\n}\n", "import mongoose from \"mongoose\";\n\nconst UserSchema = new mongoose.Schema({\n    username: {type: String, required: true},\n    email: {type: String, required: true, unique:true},\n    authentication:{\n        password: {type: String, required: true, select: false},\n        salt: {type: String, select: false},\n        sessionToken: {type: String, select: false},\n    }\n\n});\n\nexport const UserModule = mongoose.models.User || mongoose.model('User', UserSchema);\nexport const getUsers  = ()=> UserModule.find();\nexport const getUserByEmail = (email: string)=> UserModule.findOne({email});\nexport const getUserBySessionToken = (sessionToken: string)=> UserModule.findOne({'authentication.sessionToken': sessionToken});\nexport const getUserbyId = (id: string)=> UserModule.findById(id);\nexport const createUser = (values: Record<string, any>)=> new UserModule(values).save().then((user:any)=> user.toObject());\nexport const deleteUserById = (id: string)=> UserModule.findByIdAndDelete(id);\nexport const updateUserById = (id: string, values: Record <string,any>) => UserModule.findByIdAndUpdate(id, values);", "export default {'entry':{'module':'/build/entry.client-URQ7IOUN.js','imports':['/build/_shared/chunk-ZWGWGGVF.js','/build/_shared/chunk-XU7DNSPJ.js','/build/_shared/chunk-LSNQPJDP.js','/build/_shared/chunk-DM4554CJ.js','/build/_shared/chunk-GIAAE3CH.js','/build/_shared/chunk-BOXFZXVX.js','/build/_shared/chunk-UWV35TSL.js','/build/_shared/chunk-PNG5AS42.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-YSPD4UM5.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':true},'routes/user':{'id':'routes/user','parentId':'root','path':'user','index':undefined,'caseSensitive':undefined,'module':'/build/routes/user-P6HEPSCS.js','imports':undefined,'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/weather.forecast.$cityName':{'id':'routes/weather.forecast.$cityName','parentId':'root','path':'weather/forecast/:cityName','index':undefined,'caseSensitive':undefined,'module':'/build/routes/weather.forecast.$cityName-FJXABFX6.js','imports':['/build/_shared/chunk-OSXURRHE.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/weather.realTime.$cityName':{'id':'routes/weather.realTime.$cityName','parentId':'root','path':'weather/realTime/:cityName','index':undefined,'caseSensitive':undefined,'module':'/build/routes/weather.realTime.$cityName-65R6WIMF.js','imports':['/build/_shared/chunk-OSXURRHE.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/weather.recentHistory.$cityName':{'id':'routes/weather.recentHistory.$cityName','parentId':'root','path':'weather/recentHistory/:cityName','index':undefined,'caseSensitive':undefined,'module':'/build/routes/weather.recentHistory.$cityName-C7Q3VPHT.js','imports':['/build/_shared/chunk-OSXURRHE.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'003c1a49','hmr':{'runtime':'/build/_shared/chunk-DM4554CJ.js','timestamp':1705092251038},'url':'/build/manifest-003C1A49.js'};", "\nimport * as entryServer from \"/Users/francolobos/Franco/Programacion/riskFactor/nimbusHubRemixAPI/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/weather.recentHistory.$cityName.tsx\";\nimport * as route2 from \"./routes/weather.forecast.$cityName.tsx\";\nimport * as route3 from \"./routes/weather.realTime.$cityName.tsx\";\nimport * as route4 from \"./routes/user.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/weather.recentHistory.$cityName\": {\n      id: \"routes/weather.recentHistory.$cityName\",\n      parentId: \"root\",\n      path: \"weather/recentHistory/:cityName\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/weather.forecast.$cityName\": {\n      id: \"routes/weather.forecast.$cityName\",\n      parentId: \"root\",\n      path: \"weather/forecast/:cityName\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/weather.realTime.$cityName\": {\n      id: \"routes/weather.realTime.$cityName\",\n      parentId: \"root\",\n      path: \"weather/realTime/:cityName\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/user\": {\n      id: \"routes/user\",\n      parentId: \"root\",\n      path: \"user\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route4\n    }\n  };"],
  "mappings": "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",
  "names": ["jsxDEV", "json", "Fragment", "jsxDEV", "json", "loader", "json", "useLoaderData", "Fragment", "jsxDEV", "loader", "json", "useLoaderData", "loader", "json", "useLoaderData", "Fragment", "jsxDEV", "loader", "json", "useLoaderData", "loader", "json", "loader", "json"]
}

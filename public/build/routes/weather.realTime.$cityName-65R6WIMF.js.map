{
  "version": 3,
  "sources": ["../../../app/routes/weather.realTime.$cityName.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/weather.realTime.$cityName.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/weather.realTime.$cityName.tsx\");\n  import.meta.hot.lastModified = \"1705091571359.7954\";\n}\n// REMIX HMR END\n\nimport { json, useLoaderData } from \"@remix-run/react\";\n// or cloudflare/deno\nimport { getRealTimeWeather } from \"~/services/tomorrowAPI\";\nexport let loader = async ({\n  params\n}) => {\n  const {\n    cityName\n  } = params;\n  if (!cityName) {\n    return json({\n      error: 'City name is missing'\n    }, {\n      status: 400\n    });\n  }\n  try {\n    const weatherData = await getRealTimeWeather(cityName);\n    return weatherData;\n  } catch (error) {\n    console.error('Error fetching weather data:', error);\n    return json({\n      error: 'Failed to fetch weather data'\n    }, {\n      status: 500\n    });\n  }\n};\nexport default function WeatherRealTime({\n  request\n}) {\n  _s();\n  const data = useLoaderData();\n  return <>\n      {data.error ? <p>Error: {data.error}</p> : <div className=\"whitespace-pre-wrap break-words overflow-x-auto max-w-full\">{JSON.stringify(data)}</div>}\n    </>;\n}\n_s(WeatherRealTime, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = WeatherRealTime;\nvar _c;\n$RefreshReg$(_c, \"WeatherRealTime\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAsDS;AArDT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,gDAAkD,EAAE;AAAA,EAC7F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA2C;AAC3C,cAAY,IAAI,eAAe;AACjC;AA+Be,SAAR,gBAAiC;AAAA,EACtC;AACF,GAAG;AACD,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,SAAO,sFACF,eAAK,QAAQ,mDAAC,OAAE;AAAA;AAAA,IAAQ,KAAK;AAAA,OAAhB;AAAA;AAAA;AAAA;AAAA,SAAsB,IAAO,mDAAC,SAAI,WAAU,8DAA8D,eAAK,UAAU,IAAI,KAAhG;AAAA;AAAA;AAAA;AAAA,SAAkG,KAD1I;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AACA,GAAG,iBAAiB,gCAAgC,OAAO,WAAY;AACrE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,iBAAiB;AAElC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}

{
  "version": 3,
  "sources": ["../../app/root.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/root.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/root.tsx\");\n  import.meta.hot.lastModified = \"1705109130374.9236\";\n}\n// REMIX HMR END\n\nimport { Outlet, LiveReload } from \"@remix-run/react\";\nimport { isRouteErrorResponse, useRouteError } from \"@remix-run/react\";\nexport function ErrorBoundary() {\n  _s();\n  const error = useRouteError();\n  if (isRouteErrorResponse(error)) {\n    return <div>\n        <h1>\n          {error.status} {error.statusText}\n        </h1>\n        <p>{error.data}</p>\n      </div>;\n  } else if (error instanceof Error) {\n    return <div>\n        <h1>Error</h1>\n        <p>{error.message}</p>\n        <p>The stack trace is:</p>\n        <pre>{error.stack}</pre>\n      </div>;\n  } else {\n    return <h1>Unknown Error</h1>;\n  }\n}\n_s(ErrorBoundary, \"oAgjgbJzsRXlB89+MoVumxMQqKM=\", false, function () {\n  return [useRouteError];\n});\n_c = ErrorBoundary;\nexport default function Root() {\n  return <>\n      <Outlet></Outlet>\n      <LiveReload />\n    </>;\n}\n_c2 = Root;\nvar _c, _c2;\n$RefreshReg$(_c, \"ErrorBoundary\");\n$RefreshReg$(_c2, \"Root\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AA4BQ;AA3BR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mBAAqB,EAAE;AAAA,EAChE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAc;AACd,cAAY,IAAI,eAAe;AACjC;AAKO,SAAS,gBAAgB;AAC9B,KAAG;AACH,QAAM,QAAQ,cAAc;AAC5B,MAAI,qBAAqB,KAAK,GAAG;AAC/B,WAAO,mDAAC,SACJ;AAAA,yDAAC,QACE;AAAA,cAAM;AAAA,QAAO;AAAA,QAAE,MAAM;AAAA,WADxB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,OAAG,gBAAM,QAAV;AAAA;AAAA;AAAA;AAAA,aAAe;AAAA,SAJZ;AAAA;AAAA;AAAA;AAAA,WAKL;AAAA,EACJ,WAAW,iBAAiB,OAAO;AACjC,WAAO,mDAAC,SACJ;AAAA,yDAAC,QAAG,qBAAJ;AAAA;AAAA;AAAA;AAAA,aAAS;AAAA,MACT,mDAAC,OAAG,gBAAM,WAAV;AAAA;AAAA;AAAA;AAAA,aAAkB;AAAA,MAClB,mDAAC,OAAE,mCAAH;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,mDAAC,SAAK,gBAAM,SAAZ;AAAA;AAAA;AAAA;AAAA,aAAkB;AAAA,SAJf;AAAA;AAAA;AAAA;AAAA,WAKL;AAAA,EACJ,OAAO;AACL,WAAO,mDAAC,QAAG,6BAAJ;AAAA;AAAA;AAAA;AAAA,WAAiB;AAAA,EAC1B;AACF;AACA,GAAG,eAAe,gCAAgC,OAAO,WAAY;AACnE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACU,SAAR,OAAwB;AAC7B,SAAO,sFACH;AAAA,uDAAC,YAAD;AAAA;AAAA;AAAA;AAAA,WAAQ;AAAA,IACR,mDAAC,gBAAD;AAAA;AAAA;AAAA;AAAA,WAAY;AAAA,OAFT;AAAA;AAAA;AAAA;AAAA,SAGL;AACJ;AACA,MAAM;AACN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,eAAe;AAChC,aAAa,KAAK,MAAM;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
